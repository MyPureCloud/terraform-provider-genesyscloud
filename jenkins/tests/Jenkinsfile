@Library('pipeline-library') _

final def CREDENTIALS_MAP = [
  'tca': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET_TCA',
  'us-east-1': 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET'
]

final def region = REGION
def credentials = CREDENTIALS_MAP.get(region, 'GENESYSCLOUD_OAUTHCLIENT_ID_AND_SECRET')

pipeline {
    agent {
        node {
            label "dev_mesos_large_v2"
        }
    }

    environment {
        CREDENTIALS_ID  = "${credentials}"
        GOPATH = "$HOME/go"
        TF_LOG = "DEBUG"
        TF_LOG_PATH = "../test.log"
        GENESYSCLOUD_REGION = "${region}"
        GENESYSCLOUD_SDK_DEBUG =  "true"
        GENESYSCLOUD_TOKEN_POOL_SIZE =  20
        PATH = "${env.PATH}:${HOME}/go/bin:/home/jenkins/.local/bin"
        XML_REPORT = 'report.xml'
        HTML_REPORT = 'report.html'
    }
    tools {
        go 'Go 1.20'
        terraform 'Terraform 1.0.10'
    }

    stages {
      
        
        stage('Install Dependencies & Build') {
            steps {
                echo 'Installing dependencies'
                echo "${region}"
                echo "${credentials}"
                sh 'go version'
                sh 'go mod download'
                sh 'go clean -i -cache'
                sh 'go build -v .'
                sh 'pip3 install --user junit2html'
                sh 'go install gotest.tools/gotestsum@latest'
                sh 'go install github.com/nezorflame/junit-merger@latest'
                sh 'pip install xmltodict --user'
            }
        }

        stage('Terraform Check') {
            steps {
                echo 'Check Terraform Installation'
                sh 'terraform -version'

            }
        }
        
         stage('Unit Tests') {

            environment {
                TF_UNIT=1
                ENABLE_STANDALONE_EMAIL_ADDRESS=1
                ENABLE_STANDALONE_CGR=1
            }

            steps {
            catchError(buildResult: 'FAILURE', stageResult:'FAILURE'){
                echo 'Attempting to Run Unit Tests'
                withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID',passwordVariable:'GENESYSCLOUD_OAUTHCLIENT_SECRET')])
                    {
                        echo 'Loading Genesys OAuth Credentials'
                          sh "gotestsum --junitfile unit.xml --format standard-verbose ./genesyscloud/...  -run 'Test|TestUnit' -skip 'TestAcc' -v -timeout 30m -count=1 -cover -coverprofile=coverageUnit.out"

                    }
                }
            }
        }

    stage('Architect Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Architect Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile architect.xml --format standard-verbose ./genesyscloud/... -run "TestAcc.*Architect|IvrConfig" -v -count=1 -timeout 120m -cover -coverprofile=coverageArchitect.out'
                    }
                }
            }
        }

        stage('Idp Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Idp Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile idp.xml --format standard-verbose ./genesyscloud/... -run TestAcc.*Idp -v -count=1 -timeout 120m -cover -coverprofile=coverageIdp.out'
                    }
                }
            }
        }

        stage('Auth Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Auth Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile auth.xml --format standard-verbose ./genesyscloud/... -run TestAcc.*Auth -v -count=1 -timeout 120m -cover -coverprofile=coverageAuth.out'
                    }
                }
            }
        }


        stage('Integration Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Integration Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile integration.xml --format standard-verbose ./genesyscloud/... -run TestAcc.*Integration -v -count=1 -timeout 120m -cover -coverprofile=coverageIntegration.out'
                    }
                }
            }
        }

        stage('Flow Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                sh 'go clean -i -cache'
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Flow Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh "gotestsum --junitfile flow.xml --format standard-verbose ./genesyscloud/... -run 'TestAcc.*Flow' -v -count=1 -timeout 120m -cover -coverprofile=coverageFlow.out"
                    }
                }
            }
        }
        stage('Journey Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                sh 'go clean -i -cache'
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Journey Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile journey.xml --format standard-verbose ./genesyscloud/... -run TestAcc.*Journey -v -count=1 -timeout 120m -cover -coverprofile=coverageJourney.out'
                    }
                }
            }
        }

        stage('Knowledge Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Knowledge Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile knowledge.xml --format standard-verbose ./genesyscloud/... -run TestAcc.*Knowledge -v -count=1 -timeout 120m -cover -coverprofile=coverageKnowledge.out'
                    }
                }
            }
        }

        stage('Outbound Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Outbound Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile outbound.xml --format standard-verbose ./genesyscloud/... -run TestAcc.*Outbound -v -count=1 -timeout 120m -cover -coverprofile=coverageOutbound.out'
                    }
                }
            }
        }

        stage('ResponseManagement Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run ResponseManagement Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile response.xml --format standard-verbose ./genesyscloud/... -run TestAcc.*ResponseManagement -v -count=1 -timeout 120m -cover -coverprofile=coverageResponseManagement.out'
                    }
                }
            }
        }

        stage('Routing Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Routing Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh "gotestsum --junitfile routing.xml --format standard-verbose ./genesyscloud/... -run 'TestAcc.*Routing' -v -count=1 -timeout 120m -cover -coverprofile=coverageRouting.out"
                    }
                }
            }
        }

        stage('Location Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                sh 'go clean -i -cache'
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Location Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile location.xml --format standard-verbose ./genesyscloud/... -run TestAcc.*Location -v -count=1 -timeout 120m -cover -coverprofile=coverageLocation.out'
                    }
                }
            }
        }

        stage('WebDeployment Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                sh 'go clean -i -cache'
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run WebDeployment Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile web.xml --format standard-verbose ./genesyscloud/... -run TestAcc.*WebDeployment -v -count=1 -timeout 120m -cover -coverprofile=coverageWebDeployment.out'
                    }
                }
            }
        }

        stage('Site Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                sh 'go clean -i -cache'
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Site Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile site.xml --format standard-verbose ./genesyscloud/... -run TestAcc.*Site -v -count=1 -timeout 120m -cover -coverprofile=coverageSite.out'
                    }
                }
            }
        }

        stage('Roles & Team Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                sh 'go clean -i -cache'
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Roles & Teams Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile team.xml --format standard-verbose ./genesyscloud/... -run "TestAcc.*Roles|Team|ResourceGroup" -v -count=1 -timeout 120m -cover -coverprofile=coverageRoleTeam.out'
                    }
                }
            }
        }

        stage('Export Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                sh 'go clean -i -cache'
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Export Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh 'gotestsum --junitfile export.xml --format standard-verbose ./genesyscloud/... -run TestAcc.*Export -v -count=1 -timeout 120m -cover -coverprofile=coverageExport.out'
                    }
                }
            }
        }

        stage('Remaining Tests') {
            environment {
                TF_ACC=1
                TF_LOG="DEBUG"
            }
            steps {
                sh 'go clean -i -cache'
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'Attempting to Run Remaining Tests'
                    withCredentials([usernamePassword(credentialsId: CREDENTIALS_ID, usernameVariable: 'GENESYSCLOUD_OAUTHCLIENT_ID', passwordVariable: 'GENESYSCLOUD_OAUTHCLIENT_SECRET')]) {
                        echo 'Loading Genesys OAuth Credentials'
                        sh "gotestsum --junitfile remaining.xml --format standard-verbose ./genesyscloud/... -run TestAcc -skip 'Architect|Flow|Idp|Auth|Integration|Journey|Knowledge|Outbound|Routing|ResponseManagement|Export|Location|WebDeployment|Site|Roles|Team|ResourceGroup' -v -count=1 -timeout 120m -cover -coverprofile=coverageRemaining.out"

                    }
                }
            }
        }

        stage('Generate & Upload Report') {
            
        steps {
        sh 'GOBIN=$HOME/bin go install github.com/wadey/gocovmerge@latest'
        
        // Generate merged coverage report
        sh '$HOME/bin/gocovmerge coverageArchitect.out coverageIdp.out coverageAuth.out coverageIntegration.out coverageFlow.out coverageJourney.out coverageKnowledge.out coverageOutbound.out coverageResponseManagement.out coverageRouting.out coverageExport.out coverageLocation.out coverageWebDeployment.out coverageRemaining.out coverageSite.out coverageRoleTeam.out coverageUnit.out > merged_coverage.out'

        // Convert merged coverage report to HTML
        sh 'go tool cover -html merged_coverage.out -o coverageReport.html'

        sh 'junit-merger -o test-results.xml unit.xml architect.xml idp.xml auth.xml integration.xml flow.xml journey.xml knowledge.xml outbound.xml response.xml routing.xml location.xml web.xml site.xml team.xml export.xml remaining.xml'
      
  script {
    // Read the generated HTML file
    def htmlFile = readFile 'coverageReport.html'
    def selectStart = htmlFile.indexOf('<select id="files">')
    def selectEnd = htmlFile.indexOf('</select>', selectStart)
    def fileCoverageSection = htmlFile.substring(selectStart, selectEnd + 9) // +9 to include </select>

    def packageCoverage = [:]
    def packageFiles = [:]
    def packageFileMap = [:] // To store package and their corresponding files
    def fileNumberMap = [:] // To store package and their corresponding file numbers

    // Parse the existing options to calculate package-wise coverage
    fileCoverageSection.split('\n').each { line ->
        if (line.contains('<option value=')) {
            def fileNumber = line.substring(line.indexOf('value="') + 7, line.indexOf('">')).trim()
            def filePath = line.substring(line.indexOf('>') + 1, line.indexOf(' (')).trim()
            def percentage = line.substring(line.indexOf('(') + 1, line.indexOf('%')).toFloat()
            def packageName = filePath.replaceFirst('terraform-provider-genesyscloud/genesyscloud/([^/]+)/.*', '$1')
            packageFiles[packageName] = (packageFiles[packageName] ?: []) + fileNumber
            packageCoverage[packageName] = (packageCoverage[packageName] ?: 0) + percentage

            // Collect files for each package
            if (!packageFileMap.containsKey(packageName)) {
                packageFileMap[packageName] = []
            }
            packageFileMap[packageName].add([fileNumber: fileNumber, filePath: filePath, percentage: percentage])
            fileNumberMap[filePath] = fileNumber
        }
    }

    // Separate packages with and without '.go' in their names
    def packagesWithGo = []
    def packagesWithoutGo = []
    packageCoverage.each { packageName, totalPercentage ->
        if (packageName.contains('.go')) {
            packagesWithGo.add(packageName)
        } else {
            packagesWithoutGo.add(packageName)
        }
    }

    // Generate the package-wise coverage table with highlighting
    def generatePackageCoverageRows = { packages ->
        packages.collect { packageName ->
            def totalPercentage = packageCoverage[packageName]
            def averagePercentage = totalPercentage / packageFiles[packageName].size()
            def colorClass = averagePercentage < 50 ? 'light-red' : 'light-green'
            def fileRows = packageFileMap[packageName].collect { fileEntry ->
                def fileContent = htmlFile.substring(htmlFile.indexOf("<pre class=\"file\" id=\"${fileEntry.fileNumber}\""), htmlFile.indexOf("</pre>", htmlFile.indexOf("<pre class=\"file\" id=\"${fileEntry.fileNumber}\"")) + 6)
                fileContent = fileContent.replaceAll(/style="display: none"/, 'style="display: table-row"')

                def textColor = fileEntry.percentage < 50 ? 'red' : 'green'

                return """
                    <tr class='fileRow ${packageName}' style='display: none; cursor: pointer; color: ${textColor};' onclick='toggleFileContent("${fileEntry.fileNumber}")'>
                        <td>${fileEntry.filePath}</td>
                        <td style="color: ${textColor};">${String.format('%.1f', fileEntry.percentage)}%</td>
                    </tr>
                    <tr id='content_${fileEntry.fileNumber}' class='fileContentRow' style='display: none;'>
                        <td colspan='2'>
                            <pre class='file' style='display: table-row;' id='${fileEntry.fileNumber}'>${fileContent}</pre>
                        </td>
                    </tr>
                """
            }.join('\n')

            // Check if the package itself should be toggled
            def toggleAction
            if (packageFiles[packageName].size() == 1 || packageName.contains('.go')) {
                toggleAction = "toggleFileContent(\"${packageFileMap[packageName][0].fileNumber}\")"
            } else {
                toggleAction = "toggleFiles(\"${packageName}\")"
            }

            return """
                <tr class='${colorClass}' style='cursor: pointer;' onclick='${toggleAction}'>
                    <td>${packageName}</td>
                    <td>${String.format('%.1f', averagePercentage)}%</td>
                </tr>
                ${fileRows}
            """
        }.join('\n')
    }

    def packageCoverageRows = generatePackageCoverageRows(packagesWithoutGo) + generatePackageCoverageRows(packagesWithGo)

    // Define the CSS classes
    def cssStyles = """
        .light-green {
            background-color: #c8e6c9; /* light green */
        }
        .light-red {
            background-color: #ffcdd2; /* light red */
        }
        .fileRow {
            cursor: pointer;
        }
        .fileContentRow {
            background-color: #f5f5f5;
        }
        #legend {
            float: top;
            margin-top: 15px;
        }
        #packageCoverageTable {
            width: 100%;
        }
        .red {
            color: red; /* red */
        }
        .green {
            color: green; /* green */
        }
    """.stripIndent()

    // Prepare the HTML content
    def tableHtml = """
        <div id="packageCoverageTable">
            <table border="1" style="width: 100%;">
                <thead>
                    <tr>
                        <th>Package</th>
                        <th>Coverage (%)</th>
                    </tr>
                </thead>
                <tbody id="packageCoverageBody">
                    ${packageCoverageRows}
                </tbody>
            </table>
        </div>
    """.stripIndent()

    def scriptHtml = """
        <script>
            function toggleFiles(packageName) {
                const rows = document.querySelectorAll('.fileRow.' + packageName);
                rows.forEach(row => {
                    row.style.display = row.style.display === 'none' ? 'table-row' : 'none';
                });
            }
            function toggleFileContent(fileId) {
                const contentRow = document.getElementById('content_' + fileId);
                if (contentRow) {
                    contentRow.style.display = contentRow.style.display === 'none' ? 'table-row' : 'none';
                }
            }
        </script>
    """.stripIndent()

    // Remove the dropdown and insert the new table, script, and styles into the HTML file
    def updatedHtmlFile = htmlFile.replaceAll(/(?s)<select id="files">.*<\/select>/, '')
    updatedHtmlFile = updatedHtmlFile.replace('<div id="topbar">', '<!-- Removed topbar -->')
    updatedHtmlFile = updatedHtmlFile.replace('<div id="nav">', '<!-- Removed nav -->')
    updatedHtmlFile = updatedHtmlFile.replace('</head>', "<style>\n${cssStyles}\n</style>\n</head>")
    updatedHtmlFile = updatedHtmlFile.replace('</body>', tableHtml + '\n' + scriptHtml + '\n</body>')

    writeFile file: 'coverageReport.html', text: updatedHtmlFile

                    // Generate manual report
                    def xmlContent = readFile 'test-results.xml'

                    // Extract test case information using regular expressions
                    def testCases = []
                    def testCasePattern = /<testcase\s+classname="([^"]+)"\s+name="([^"]+)"\s+time="([^"]+)"/
                    def failurePattern = /<failure[^>]*>([\s\S]*?)<\/failure>/
                    def skippedPattern = /<skipped[^>]*>([\s\S]*?)<\/skipped>/

                    def matcher = xmlContent =~ testCasePattern
                    while (matcher.find()) {
                        def classname = matcher.group(1)
                        def name = matcher.group(2)
                        def time = matcher.group(3)
                        def remainingText = xmlContent.substring(matcher.end())

                        def endIndex = remainingText.indexOf('</testcase>')
                        def details = endIndex != -1 ? remainingText.substring(0, endIndex) : ""

                        def result = [
                            name: name,
                            classname: classname,
                            time: time,
                            status: 'Passed', // Default to Passed
                            reason: '',
                            log: details
                        ]

                        // Check for failure or skipped
                        def failureMatcher = details =~ failurePattern
                        def skippedMatcher = details =~ skippedPattern
                        if (failureMatcher.find()) {
                            result.status = 'Failed'
                            result.log = failureMatcher.group(1).trim()
                        } else if (skippedMatcher.find()) {
                            result.status = 'Skipped'
                            result.log = skippedMatcher.group(1).trim()
                        }

                        // Extract reason
                        if (result.status == 'Failed') {
                            result.reason = extractReason(result.log)
                        } else if (result.status == 'Skipped') {
                            result.reason = extractReason(result.log)
                        }

                        testCases << result
                    }

                    // Generate HTML report
                    def html = new StringBuilder()
                    html.append("""
                    <html>
                    <head>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 20px; }
                            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                            th { background-color: #f2f2f2; }
                            .passed { background-color: #d4edda; }
                            .failed { background-color: #f8d7da; }
                            .skipped { background-color: #fff3cd; }
                            .summary { margin-bottom: 20px; }
                            .summary div { margin: 5px 0; }
                            .link { color: #007bff; text-decoration: none; }
                            .reason-content { margin-top: 10px; padding: 10px; border: 1px solid #ccc; background-color: #f9f9f9; word-wrap: break-word; white-space: pre-wrap; }
                            .test-case { border-left: 4px solid #dc3545; padding-left: 10px; margin-top: 20px; background-color: #f8d7da; padding: 10px; border-radius: 5px; }
                        </style>
                    </head>
                    <body>
                        <h2>Test Results</h2>
                        <div class="summary">
                            <div>Total Tests: ${testCases.size()}</div>
                            <div style="color: green;">Total Passed: ${testCases.count { it.status == 'Passed' }}</div>
                            <div style="color: red;">Total Failed: ${testCases.count { it.status == 'Failed' }}</div>
                            <div style="color: orange;">Total Skipped: ${testCases.count { it.status == 'Skipped' }}</div>
                        </div>

                        <h3>Failed Tests</h3>
                        <table>
                            <tr>
                                <th>Status</th>
                                <th>Class Name</th>
                                <th>Test Name</th>
                                <th>Duration (s)</th>
                            </tr>
                    """)

                    testCases.findAll { it.status == 'Failed' }.each { result ->
                        html.append("""
                        <tr class="failed">
                            <td>${result.status}</td>
                            <td>${result.classname}</td>
                            <td>
                                <a href="#${result.name}" class="link">${result.name}</a>
                            </td>
                            <td>${result.time}</td>
                        </tr>
                        """)
                    }

                    html.append("""
                        </table>

                        <h3>Skipped Tests</h3>
                        <table>
                            <tr>
                                <th>Status</th>
                                <th>Class Name</th>
                                <th>Test Name</th>
                            </tr>
                    """)

                    testCases.findAll { it.status == 'Skipped' }.each { result ->
                        html.append("""
                        <tr class="skipped">
                            <td>${result.status}</td>
                            <td>${result.classname}</td>
                            <td>${result.name}</td>
                        </tr>
                        """)
                    }

                    html.append("""
                        </table>

                        <h3>Passed Tests</h3>
                        <table>
                            <tr>
                                <th>Status</th>
                                <th>Class Name</th>
                                <th>Test Name</th>
                                <th>Duration (s)</th>
                            </tr>
                    """)

                    testCases.findAll { it.status == 'Passed' }.each { result ->
                        html.append("""
                        <tr class="passed">
                            <td>${result.status}</td>
                            <td>${result.classname}</td>
                            <td>${result.name}</td>
                            <td>${result.time}</td>
                        </tr>
                        """)
                    }

                    html.append("""
                        </table>

                        <h3>Test Details</h3>
                    """)

                    testCases.findAll { it.status == 'Failed' }.each { result ->
                        html.append("""
                        <div id="${result.name}" class="reason-detail">
                            <div class="test-case failed">
                                <h4>${result.classname}.${result.name}</h4>
                                <p>Status: ${result.status}</p>
                                <p>Duration: ${result.time}s</p>
                                <div class="reason-content">
                                    ${result.log}
                                </div>
                            </div>
                        </div>
                        """)
                    }

                    html.append("""
                    </body>
                    </html>
                    """)

                    // Save the HTML report to a file
                    writeFile file: 'test-report.html', text: html.toString()

                // Optionally, print the location of the HTML report
                    echo "HTML report generated: \${env.WORKSPACE}/test-report.html"
                }
                archiveArtifacts artifacts: 'coverageReport.html,test-report.html,test-results.xml', allowEmptyArchive: true   
           }
        }
    }
}
 
 def extractReason(String log) {
    // Extract reason from the log
    def reason = ""
    def reasonPattern = /message="([^"]*)">/
    def matcher = log =~ reasonPattern
    if (matcher.find()) {
        reason = matcher.group(1).trim()
    }
    return reason
}


    
