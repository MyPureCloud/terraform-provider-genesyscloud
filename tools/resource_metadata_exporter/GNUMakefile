# GNUMakefile for Resource Metadata Exporter
# A standalone CLI tool for managing resource metadata in the Genesys Cloud Terraform Provider

.PHONY: build test clean install help

# Variables
BINARY_NAME=resource-metadata-exporter
BUILD_DIR=build
VERSION=$(shell git describe --tags --always --dirty 2>/dev/null || echo "dev")
COMMIT=$(shell git rev-parse --short HEAD 2>/dev/null || echo "unknown")
DATE=$(shell date -u +"%Y-%m-%dT%H:%M:%SZ")

# Build flags
LDFLAGS=-ldflags "-X main.Version=$(VERSION) -X main.Commit=$(COMMIT) -X main.Date=$(DATE)"

# Default target
all: build

# Build the binary
build: clean
	@echo "Building $(BINARY_NAME)..."
	@mkdir -p $(BUILD_DIR)
	go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME) .

# Build for multiple platforms
build-all: clean
	@echo "Building for multiple platforms..."
	@mkdir -p $(BUILD_DIR)
	
	# Linux
	GOOS=linux GOARCH=amd64 go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME)-linux-amd64 .
	
	# macOS
	GOOS=darwin GOARCH=amd64 go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME)-darwin-amd64 .
	GOOS=darwin GOARCH=arm64 go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME)-darwin-arm64 .
	
	# Windows
	GOOS=windows GOARCH=amd64 go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME)-windows-amd64.exe .

# Run tests
test:
	@echo "Running tests..."
	go test -v ./...

# Run tests with coverage
test-coverage:
	@echo "Running tests with coverage..."
	go test -v -coverprofile=coverage.out ./...
	go tool cover -html=coverage.out -o coverage.html
	@echo "Coverage report generated: coverage.html"

# Install the binary
install: build
	@echo "Installing $(BINARY_NAME)..."
	cp $(BUILD_DIR)/$(BINARY_NAME) /usr/local/bin/$(BINARY_NAME)

# Clean build artifacts
clean:
	@echo "Cleaning build artifacts..."
	rm -rf $(BUILD_DIR)
	rm -f coverage.out coverage.html

# Run the binary
run: build
	@echo "Running $(BINARY_NAME)..."
	./$(BUILD_DIR)/$(BINARY_NAME) --help

# Show help
help:
	@echo "Resource Metadata Exporter - Build Targets"
	@echo "=========================================="
	@echo "build          - Build the binary"
	@echo "build-all      - Build for all platforms (Linux, macOS, Windows)"
	@echo "test           - Run tests"
	@echo "test-coverage  - Run tests with coverage report"
	@echo "install        - Install binary to /usr/local/bin"
	@echo "clean          - Clean build artifacts"
	@echo "run            - Build and run the binary"
	@echo "help           - Show this help message"
	@echo ""
	@echo "Examples:"
	@echo "  make build"
	@echo "  make test"
	@echo "  make install"
	@echo "  ./build/resource-metadata-exporter discover --path ../genesyscloud"

# Development targets
dev-setup:
	@echo "Setting up development environment..."
	go mod download
	go mod tidy

# Lint the code
lint:
	@echo "Linting code..."
	golangci-lint run

# Format the code
fmt:
	@echo "Formatting code..."
	go fmt ./...

# Generate documentation
docs:
	@echo "Generating documentation..."
	@mkdir -p docs
	./$(BUILD_DIR)/$(BINARY_NAME) discover --help > docs/discover.md
	./$(BUILD_DIR)/$(BINARY_NAME) export --help > docs/export.md
	./$(BUILD_DIR)/$(BINARY_NAME) validate --help > docs/validate.md
	./$(BUILD_DIR)/$(BINARY_NAME) template --help > docs/template.md

# Create release package
release: build-all
	@echo "Creating release package..."
	@mkdir -p release
	tar -czf release/$(BINARY_NAME)-$(VERSION)-linux-amd64.tar.gz -C $(BUILD_DIR) $(BINARY_NAME)-linux-amd64
	tar -czf release/$(BINARY_NAME)-$(VERSION)-darwin-amd64.tar.gz -C $(BUILD_DIR) $(BINARY_NAME)-darwin-amd64
	tar -czf release/$(BINARY_NAME)-$(VERSION)-darwin-arm64.tar.gz -C $(BUILD_DIR) $(BINARY_NAME)-darwin-arm64
	zip -j release/$(BINARY_NAME)-$(VERSION)-windows-amd64.zip $(BUILD_DIR)/$(BINARY_NAME)-windows-amd64.exe 